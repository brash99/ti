# 
#  User readout list using a TI (pipeline) in MASTER mode
#   With an SFI in a Fastbus crate... readout of an Lecroy 1881 ADC.
#
#    Bryan Moffit, TJNAF 2014
#

readout list GEN_USER
maximum 1024,512
sfi readout

include "GEN_source.h"
include "../tiLib.h"

# A24 Address for TI Module (e.g. Slot number = 2)
const TRIG_ADDR = 0x100000
# TRIG_MODE=0 for interrupt mode (External input)
const TRIG_MODE = 0

const SFI_ADDR  = hex e00000

const BLOCKLEVEL=1
const BUFFERLEVEL=1

# (1) Use internal pulser as the trigger, otherwise use TSINPUTS
const USE_PULSER=1

# Decision on whether (1) or not (0) to readout TI
const READOUT_TI=0

# 1881 Paramters
const ADC_SLOT = 16
const SCANMASK = 0x10000
const ADC_PRGM_CSR0 = 0x34000340


extern int bigendian_out;
int blockLevel=1;
unsigned int *tiData=NULL;

############################################################
# DOWNLOAD
############################################################
begin download

variable adc_id,res,laddr


# When sending to a Linux Host set bigendian_out = 0
bigendian_out = 0;

# Setup SFI pointers to Enable triggers, and establish
# DMA address offsets
%%
  res = (unsigned long) sysBusToLocalAdrs(0x39,SFI_ADDR,&laddr);
  if (res != 0) {
     printf("Error Initializing SFI res=%d \n",res);
  } else {
     printf("Calling InitSFI() routine with laddr=0x%x.\n",laddr);
     InitSFI(laddr);
  }
%%

# Setup TI
%%
{
  /* measured longest fiber length */
  tiSetFiberLatencyOffset_preInit(0x40); 

  /* Set crate ID */
  tiSetCrateID_preInit(0x1); /* ROC 1 */

  /* TI Setup */
  tiInit(TRIG_ADDR,TRIG_MODE,0);
  tiDisableBusError();

  if(READOUT_TI==0) /* Disable data readout */
    {
      tiDisableDataReadout();

      /* Disable A32... where that data would have been stored on the TI */
      tiDisableA32();
    }
  
  /* Override library default busy source */
  tiSetBusySource(TI_BUSY_LOOPBACK,1);

  if(USE_PULSER==1)
    tiSetTriggerSource(TI_TRIGGER_PULSER);
  else
    tiSetTriggerSource(TI_TRIGGER_TSINPUTS);


  /* Set needed TS input bits */
  tiEnableTSInput( TI_TSINPUT_1 | TI_TSINPUT_2 );

  /* Load the trigger table
   *  - 0:
   *    - TS#1,2,3,4,5 generates Trigger1 (physics trigger),
   *    - TS#6 generates Trigger2 (playback trigger),
   *    - No SyncEvent;
   */
  tiLoadTriggerTable(0);

  tiSetTriggerHoldoff(1,10,0);
  tiSetTriggerHoldoff(2,10,0);

  tiSetBlockBufferLevel(BUFFERLEVEL);


  tiStatus(0);
}
%%

%%
{
  /* Perform these at the end of DOWNLOAD */
  tiDisableVXSSignals();
  tiClockReset();
  taskDelay(2);
  tiTrigLinkReset();
}
%%

  log inform "User Download Executed"

end download
    
############################################################
# PRESTART
############################################################
begin prestart

  variable jj, adc_id=0

  log inform "Entering User Prestart"

  init trig source GEN
  link async trig source GEN 1 to titrig and titrig_done
  event type 1 then read GEN 1

%%
{ 
  /* Set number of events per block (broadcasted to all connected TI Slaves)*/
  tiSetBlockLevel(BLOCKLEVEL);
  printf("rocPrestart: Block Level set to %d\n",BLOCKLEVEL);
}
%%

# 1881 Configuration
reset crate 0

# Fast Clear/Reset 1881
  write hex 08000000 into geo control ADC_SLOT
  write hex 40000000 into geo control ADC_SLOT

  geographic control ADC_SLOT
# Enable priming online.. Enable Gate
     write hex 00000104
     secondary address 1
# Enable 12bit
     write hex 00000080
     secondary address 7
# Specifiy broadcast group
     write 2
  release
  sfi_error_decode(0);

# Get the ID
  read from geo control ADC_SLOT into adc_id
  log inform "ADC ID = 0x%x",adc_id

%%
{
  /* Send a SyncReset, at the end of prestart */
  tiSyncReset(1);
  taskDelay(2);
}
%%

  log inform "User Prestart Executed"

end prestart

############################################################
# END
############################################################
begin end

%%
{
  CDODISABLE(GEN,1,0);

  if(USE_PULSER==1)
    tiSoftTrig(1,0,0x1123,1);

  tiStatus(0);
  printf("Interrupt Count: %8d \n",tiGetIntCount());

  /* Free up the allocated memory for the tiData */
  if(tiData!=NULL)
    {
      free(tiData);
      tiData=NULL;
   } 
}
%%

  log inform "User End Executed"

end end

############################################################
# PAUSE
############################################################
begin pause

  CDODISABLE(GEN,1,0);

  log inform "User Pause Executed"

end pause

############################################################
# GO
############################################################
begin go
  
  log inform "Entering User Go"
  
%%
{
  /* Get the current Block Level */
  blockLevel = tiGetCurrentBlockLevel();
  printf("rocGo: Block Level set to %d\n",blockLevel);

  /* Allocate some memory for TI data */
  tiData = (unsigned int*)malloc((8+5*blockLevel)*sizeof(unsigned int));
}
%%


%%
{
  CDOENABLE(GEN,1,0);

  if(USE_PULSER==1)
    tiSoftTrig(1,3000,0x1123,1);

  tiStatus(0);
}
%%

  log inform "User Go Executed"

end go

############################################################
# TRIGGER
############################################################
begin trigger titrig
  variable dCnt,ev_type,ii,datascan,res

# Enable SFI Sequencer
  *sfi.sequencerEnable = 1;

  rol->dabufp = (long *) 0;

%%
{
  /* Readout TI to get Event Type */
  ev_type=1; /* Default event type (for example) */
  if(READOUT_TI==1)
    {
      dCnt = tiReadBlock(tiData,8+5*blockLevel,0);
      if(dCnt<=0)
	{
	  logMsg("No data or error.  dCnt = %d\n",dCnt);
	}
      else
	{
	  ev_type = tiDecodeTriggerType(tiData, dCnt, 1);
	  if(ev_type <= 0)
	    {
	      /* Could not find trigger type */
	      ev_type = 1;
	    }

	  /* CODA 2.x only allows for 4 bits of trigger type */
	  ev_type &= 0xF; 
	}
    }
  
}

%%

  # Open up the event of type ev_type
  open event type ev_type of BT_BANK

%%
{
  if(READOUT_TI==1)
    {
      /* Open a CODA Bank of 4byte unsigned integers, type=4 (for example) */
      CBOPEN(4,BT_UI4,0);
      if(dCnt<=0)
	{
	  logMsg("No data or error.  dCnt = %d\n",dCnt);
	}
      else
	{
	  for(ii=0; ii<dCnt; ii++)
	    *rol->dabufp++ = tiData[ii];
	}
      CBCLOSE;
    }

  /* Add in some example user data */
  CBOPEN(3,BT_UI4,0);
  *rol->dabufp++ = 0x12345678;
  CBCLOSE;
}

%%

# Fastbus 1881 readout
%%
{
  /* Software Gate */
  res = fpwc(ADC_SLOT,0,0x80);
  
  /* Broadcast scan for data */
  ii=0;
  datascan = 0;
  while ((ii<50) && ((datascan&SCANMASK) != SCANMASK)) {
    res = fb_frcm_1(9,0,&datascan,1,0,1,0,0,0);
    ii++;
  }

  /* Load next event -- broadcast */
  padr = 0x15;
  fb_fwcm_1(0x15,0,0x400,1,0,1,0,0,0);
  
}
%%
  open bank 7 of BT_UI4

  if ii is less than 50 then

# Block Read the Data
    output hex da000011
    block read 100 from geo data ADC_SLOT 
    output hex da000022

# Increment the event counter
    write hex 800000 into geo control ADC_SLOT

  else

    output datascan
    output ii
    output hex da0000ff

  endif

  close bank

 close event

end trigger

begin done titrig

end done

############################################################
# DONE (TRIGGER ACKNOWLEDGE)
############################################################
begin done
  CDOACK(GEN,1,0);
end done

begin status

end status


